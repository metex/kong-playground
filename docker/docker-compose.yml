version: '3'

services:

  kong-database:
    image: postgres:9.6
    container_name: kong-database
    #user: postgres
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
      #- POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      #- "db-data-kong-postgres:/var/lib/postgresql/data"
      - /root/kong_stack/kong/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - /root/kong_stack/kong/postgresql/data:/var/lib/postgresql/data
    network_mode: "bridge"

  kong-migrations:
    image: custom-kong
    container_name: kong-migrations
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
    command: ["kong",  "migrations", "bootstrap", "&&", "kong",  "migrations", "up"]
    restart: on-failure
    depends_on:
      kong-database:
        condition: service_healthy
    links:
      - kong-database:kong-database
    network_mode: "bridge"

  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    links:
      - kong:kong
      - kong-database:kong-database
    depends_on:
      kong-database:
        condition: service_healthy
    container_name: konga
    environment:
      - NODE_ENV=development
      - DB_ADAPTER=postgres
      - DB_HOST=kong-database
      - DB_PORT=5432
      - DB_USER=kong
      - DB_PASSWORD=kong
      - DB_DATABASE=konga
      #- DB_PG_SCHEMA=
      - KONGA_LOG_LEVEL=debug
      #- NO_AUTH=true
    network_mode: "bridge"

  kong:
    image: custom-kong
    container_name: kong
    environment:
      - LC_CTYPE=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_LUA_PACKAGE_PATH=/usr/local/lib/luarocks/rocks-5.1/kong-oidc/1.1.0-0/?.lua;/usr/local/lib/luarocks/rocks-5.1/kong-plugin-jwt-keycloak/1.1.0-0/?.lua;/usr/local/lib/luarocks/rocks-5.1/kong-plugin-header-echo/0.1.0-1/?.lua;/usr/local/lib/luarocks/rocks-5.1/kong-plugin-custom-auth/0.1.0-1/?.lua;./?.lua;./?/init.lua;
      - KONG_PLUGINS=bundled, oidc, jwt-keycloak, kong-plugin-header-echo, custom-auth
      - KONG_LOG_LEVEL=debug
    restart: on-failure
    ports:
      - 8002:8000
      - 8022:8002
      - 8445:8445
      - 8443:8443
      - 8001:8001
      - 8444:8444
      - 8003:8003
      - 8004:8004
    links:
      - kong-database:kong-database
    depends_on:
      - kong-migrations
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /root/kong_stack/kong/kong.conf.default:/etc/kong/kong.conf
    network_mode: "bridge"

  keycloak-database:
    container_name: keycloak-database
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
    image: postgres:10
    ports:
      - 5433:5433
    volumes:
      - /root/kong_stack/keycloak/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - /root/kong_stack/keycloak/postgresql/data:/var/lib/postgresql/data
    network_mode: "bridge"
    
  openldap:
    image: osixia/openldap:1.3.0
    container_name: openldap
    ports:
      - 8389:389
    network_mode: "bridge"
  
  keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    container_name: keycloak
    command:
      - "start-dev"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
      - "-Dkeycloak.profile.feature.admin_fine_grained_authz=enabled"
      - "-Dkeycloak.profile.feature.token_exchange=enabled"
      - "-Dkeycloak.profile.feature.declarative_user_profile=enabled"
    depends_on:
      - keycloak-database
      - openldap
    environment:
      - KC_PROXY=edge
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_LOGLEVEL=INFO
      # - KC_DB_URL=jdbc:postgresql://keycloak-database:5433/keycloak
      - KC_DB=postgres
      - KC_DB_URL_PORT=5433
      - KC_DB_URL_HOST=keycloak-database
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=password
      #- KC_DB_SCHEMA=
    ports:
      - 8090:8080 ## HTTP PORT
      - 8943:8443 ## HTTPS PORT
    links:
      - keycloak-database:keycloak-database
      - internal-auth-api:internal-auth-api
    network_mode: "bridge"
    volumes:
      - /root/kong_stack/keycloak/keycloak.conf:/opt/keycloak/conf/keycloak.conf
      - /root/kong_stack/keycloak/providers:/opt/keycloak/providers
      
  zipkin-storage:
    image: openzipkin/zipkin-mysql
    container_name: zipkin-storage
    # Uncomment to expose the storage port for testing
    ports:
      - 3306:3306
    #volumes:
    #  - dbfiles:/mysql/data
    restart: unless-stopped
    network_mode: "bridge"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/tree/1.19.0/zipkin-server#environment-variables
    environment:
      - STORAGE_TYPE=mysql
      # Point the zipkin at the storage backend
      - MYSQL_HOST=zipkin-storage
      - MYSQL_USER=zipkin
      - MYSQL_PASS=zipkin
      # Uncomment to enable scribe
      # - SCRIBE_ENABLED=true
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
    depends_on:
      zipkin-storage:
        condition: service_healthy
    links:
      - zipkin-storage:zipkin-storage
    restart: unless-stopped
    network_mode: "bridge"
  
  internal-auth-api:
    image: metalfarmer/internal-auth-api
    container_name: internal-auth-api
    restart: unless-stopped
    ports:
      - 5001:5000
    network_mode: "bridge"

  #zipkin-dependencies:
  #  image: openzipkin/zipkin-dependencies
  #  container_name: zipkin-dependencies2
  #  entrypoint: crond -f
  #  environment:
  #    - STORAGE_TYPE=mysql
  #    - MYSQL_HOST=mysql
  #    # Add the baked-in username and password for the zipkin-mysql image
  #    - MYSQL_USER=zipkin
  #    - MYSQL_PASS=zipkin
  #    # Uncomment to adjust memory used by the dependencies job
  #    - JAVA_OPTS=-verbose:gc -Xms512m -Xmx512m
  #  depends_on:
  #    zipkin-storage:
  #      condition: service_healthy
  #  links:
  #    - zipkin-storage:zipkin-storage
  #  restart: unless-stopped
  #  network_mode: "bridge"

volumes:
  db-data-kong-postgres: